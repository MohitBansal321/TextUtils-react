{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","defaultProps","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","wordLen","split","length","toFixed","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","placeholder","newText","toUpperCase","showAlert","toLowerCase","newtext","replace","console","log","join","newStr","map","word","substring","navigator","clipboard","writeText","String","trim","Alert","alert","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"6LAGe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMM,KAAI,QAAAD,OAAOL,EAAMM,OACvEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAC9BP,EAAMQ,OAETP,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVK,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeY,eAAa,OAAOT,KAAK,KAAG,UAU5DN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASa,KAAK,UAC5BhB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbL,EAAMM,KAAe,OAAO,UACzEL,EAAAC,EAAAC,cAAA,SACEC,UAAU,mBACVc,QAASlB,EAAMmB,WACfV,KAAK,WACLQ,KAAK,SACLF,GAAG,2BAELd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBgB,QAAQ,0BAAwB,kBAalFrB,EAAOsB,aAAe,CACpBb,MAAO,wBCvDM,SAASc,EAAStB,GAC7B,IA0CCuB,EACoBC,mBAAS,KAAIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA3BK,EAAIH,EAAA,GAACI,EAAOJ,EAAA,GACfK,GAAS,KAAQF,EAAKG,MAAM,KAAKC,QAAQC,QAAQ,GASvD,OACEhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACAjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAY+B,MAAO,CAACC,MAAmB,SAAbpC,EAAMM,KAAc,QAAQ,UACjEL,EAAAC,EAAAC,cAAA,UAAKH,EAAMqC,SACXpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAekC,MAAOV,EAAMW,SAlBjC,SAACC,GAClBX,EAAQW,EAAMC,OAAOH,QAiBuDH,MAAO,CAACO,gBAA6B,SAAb1C,EAAMM,KAAc,OAAO,QAAQ8B,MAAmB,SAAbpC,EAAMM,KAAc,QAAQ,SAAUS,GAAG,QAAQ4B,KAAK,IAAIC,YAAY,0BAEnN3C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA5DzB,WAChB,IAAI2B,EAAQjB,EAAKkB,cACjBjB,EAAQgB,GACR7C,EAAM+C,UAAU,yBAAyB,aAyDuB,wBAChE9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QAxDxB,WACnB,IAAI2B,EAAQjB,EAAKoB,cACjBnB,EAAQgB,GACR7C,EAAM+C,UAAU,yBAAyB,aAqD0B,wBACjE9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QApDtB,WACrB,IACI+B,EAAQrB,EAAKsB,QADH,4CACiB,KAC/BC,QAAQC,IAAIH,GACZA,EAAQA,EAAQlB,MAAM,QACtBoB,QAAQC,IAAIH,GACZpB,EAAQoB,EAAQI,KAAK,MACrBrD,EAAM+C,UAAU,8BAA8B,aA6CuB,eACnE9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QAxCnB,WACxB,IAGMoC,EAHM1B,EACWG,MAAM,KACAwB,IAAI,SAAAC,GAAI,OAAIA,EAAK,GAAGV,cAAgBU,EAAKC,UAAU,KACtDJ,KAAK,KAC/BxB,EAAQyB,GACRtD,EAAM+C,UAAU,0BAA0B,aAkC8B,iBACtE9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA7CtB,WACrBW,EAAQ,IACR7B,EAAM+C,UAAU,aAAa,aA2CwC,cACnE9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QAlCvB,WACpBwC,UAAUC,UAAUC,UAAUC,OAAOjC,IACrC5B,EAAM+C,UAAU,oBAAoB,aAgCgC,qBAClE9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA/BrB,WACtB,IAAI2B,EAAQjB,EAAKG,MAAM,QACvBF,EAAQgB,EAAQQ,KAAK,MACrBrD,EAAM+C,UAAU,uBAAuB,aA4B+B,uBAExE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB+B,MAAO,CAACC,MAAmB,SAAbpC,EAAMM,KAAc,QAAQ,UACxEL,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAxBGyB,EAAKI,OAAO,EACNJ,EAAKkC,OAAO/B,MAAM,QAAQC,OAG1B,EAoBM,UAASJ,EAAKI,OAAM,eACnC/B,EAAAC,EAAAC,cAAA,SAAI2B,EAAO,iBACX7B,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIyB,EAAKI,OAAO,EAAEJ,EAAK,8DC7DdmC,MAbf,SAAe/D,GAMb,OACEA,EAAMgE,OAAS/D,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAMgE,MAAMvD,KAAI,gCAAgCQ,KAAK,SAC/FhB,EAAAC,EAAAC,cAAA,cAPW,SAACqD,GAEd,IAAMS,EAAMT,EAAKR,cACjB,OAAOiB,EAAMC,OAAO,GAAGpB,cAAgBmB,EAAME,MAAM,GAIxCC,CAAWpE,EAAMgE,MAAMvD,OAAe,MAAIT,EAAMgE,MAAMK,MC+CxDC,MA7Cf,WAAe,IAAA/C,EACMC,mBAAS,SAAQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA/BjB,EAAImB,EAAA,GAAC8C,EAAO9C,EAAA,GAAA+C,EACMhD,mBAAS,MAAKiD,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAA9BR,EAAKS,EAAA,GAACC,EAAQD,EAAA,GACf1B,EAAU,SAAC4B,EAAQlE,GACvBiE,EAAS,CACPL,IAAIM,EACJlE,KAAKA,IAEPmE,WAAW,kBAAIF,EAAS,OAAM,OAchC,OACEzE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KAaEjC,EAAAC,EAAAC,cAACJ,EAAM,CAACS,MAAM,YAAYF,KAAMA,EAAMa,WA1BzB,WACL,UAAPb,GACDiE,EAAQ,QACRM,SAASC,KAAK3C,MAAMO,gBAAgB,UACpCK,EAAU,6BAA6B,aAGvCwB,EAAQ,SACRM,SAASC,KAAK3C,MAAMO,gBAAgB,QACpCK,EAAU,8BAA8B,eAkBxC9C,EAAAC,EAAAC,cAAC4E,EAAK,CAACf,MAAOA,IACd/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACmB,EAAQ,CAACyB,UAAWA,EAAWV,QAAQ,kCAAkC/B,KAAMA,OCvCzE0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWjB,SAASkB,eAAe,SACpDC,OACH/F,EAAAC,EAAAC,cAACF,EAAAC,EAAM+F,WAAU,KACfhG,EAAAC,EAAAC,cAAC+F,EAAG,QAORlB","file":"static/js/main.7d8eaec5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { a } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a\" href=\"/about\">\r\n                About\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                onClick={props.toggleMode}\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                Dark Mode\r\n              </label>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Lowercase to Uppercase\",\"success\");\r\n    }\r\n    const handlelowClick=()=>{\r\n      let newText=text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Uppercase to Lowercase\",\"success\");\r\n    }\r\n    const handleAlphaClick=()=>{\r\n      const regex = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/g;\r\n      let newtext=text.replace(regex,' ');\r\n      console.log(newtext);\r\n      newtext=newtext.split(/[ ]+/);\r\n      console.log(newtext)\r\n      setText(newtext.join(\" \"));\r\n      props.showAlert(\"Change to AlphaNumeric only\",\"success\");\r\n    }\r\n    const handleClearClick=()=>{\r\n      setText(\"\");\r\n      props.showAlert(\"Clear Text\",\"success\");\r\n    }\r\n    const handleCapilizeClick=()=>{\r\n      let newText=text;\r\n      const arrayStr=newText.split(\" \");\r\n      const allFirstToUC =arrayStr.map(word => word[0].toUpperCase() + word.substring(1));\r\n      const newStr=allFirstToUC.join(' ');\r\n      setText(newStr);\r\n      props.showAlert(\"Capaitilze first letter\",\"success\");\r\n    }\r\n    const handleCopyClick=()=>{\r\n      navigator.clipboard.writeText(String(text));\r\n      props.showAlert(\"Copy to Clipboard\",\"success\");\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n      let newText=text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Extra Spaces Removed\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text,setText]=useState(\" \")\r\n    let wordLen=(0.008 * text.split(\" \").length).toFixed(3);\r\n    const countWord=()=>{\r\n      if(text.length>0){\r\n        return text.trim().split(/[ ]+/).length;\r\n      }\r\n      else{\r\n        return 0;\r\n      }\r\n    }\r\n  return (\r\n    <>\r\n    <div className='container' style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>  \r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode===\"dark\"?\"grey\":\"white\",color:props.mode===\"dark\"?\"white\":\"black\"}} id=\"myBox\" rows=\"8\" placeholder=\"Enter Your Text Here\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handlelowClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleAlphaClick}>Alpabatical</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCapilizeClick}>Capilize Case</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copy to Clipboard</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n    </div>\r\n    <div className=\"container my-2\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n      <h2>Your Text Summary</h2>\r\n      <p>{countWord()} words,{text.length} characters</p>\r\n      <p>{wordLen} Mintues read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter Something in the textbox above to preview it here.\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize=(word)=>{\r\n      \r\n      const lower=word.toLowerCase();\r\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, {useState} from \"react\";\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\nfunction App() {\n  let [mode,setMode]=useState(\"light\");\n  const [alert,setAlert]=useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>setAlert(null),1500);\n  }\n  const toggleMode=()=>{ \n    if(mode===\"light\"){\n      setMode(\"dark\")\n      document.body.style.backgroundColor=\"#031125\";\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"Light Mode has been enabled\",\"success\")\n    }\n  }\n  return (\n    <>\n    {/* <Router>\n      <Navbar title=\"TEXTUTILS\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert }/>\n      <div className=\"container my-3 pt-4\">\n      <Routes>\n          <Route exact path=\"/about\" element={<About/>}>\n          </Route>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the Text to analyse below\" mode={mode}/>}>\n          </Route>\n        </Routes>\n      </div>\n      </Router> */}\n      <Navbar title=\"TEXTUTILS\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3 pt-4\">\n        <TextForm showAlert={showAlert} heading=\"Enter the Text to analyse below\" mode={mode}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}